9)   Write a program to compute the finish time, turnaround time and waiting time for the First come First serve

#include <stdio.h>

struct Process {
    int id;             // Process ID
    int arrivalTime;    // Arrival time of the process
    int burstTime;      // Burst time (execution time) required by the process
    int finishTime;     // Finish time
    int turnaroundTime; // Turnaround time
    int waitingTime;    // Waiting time
};

void calculateTimes(struct Process p[], int n) {
    int currentTime = 0;

    for (int i = 0; i < n; i++) {
        // If the process arrives after the current time, fast-forward time to its arrival
        if (currentTime < p[i].arrivalTime) {
            currentTime = p[i].arrivalTime;
        }
        
        // Calculate finish time for the process
        p[i].finishTime = currentTime + p[i].burstTime;
        
        // Calculate turnaround time and waiting time
        p[i].turnaroundTime = p[i].finishTime - p[i].arrivalTime;
        p[i].waitingTime = p[i].turnaroundTime - p[i].burstTime;
        
        // Update current time to the finish time of the current process
        currentTime = p[i].finishTime;
    }
}

void displayProcessInfo(struct Process p[], int n) {
    printf("ID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t\t%d\n",
               p[i].id, p[i].arrivalTime, p[i].burstTime,
               p[i].finishTime, p[i].turnaroundTime, p[i].waitingTime);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    // Input arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter arrival time and burst time for process %d: ", p[i].id);
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
    }

    // Calculate times using FCFS scheduling
    calculateTimes(p, n);

    // Display process information with calculated times
    printf("\nProcess information:\n");
    displayProcessInfo(p, n);

    return 0;
}

10) Write a program to compute the finish time, turnaround time and waiting time for the
 Shortest Job First (Preemptive and Non Preemptive)

#include <stdio.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int finishTime;
    int turnaroundTime;
    int waitingTime;
    int completed;
};

void calculateTimes(struct Process p[], int n) {
    int currentTime = 0, completedProcesses = 0;

    while (completedProcesses < n) {
        int shortest = -1;
        int minBurst = 1e9;

        // Find process with shortest burst time among available processes
        for (int i = 0; i < n; i++) {
            if (!p[i].completed && p[i].arrivalTime <= currentTime && p[i].burstTime < minBurst) {
                minBurst = p[i].burstTime;
                shortest = i;
            }
        }

        // If no process is available, advance time
        if (shortest == -1) {
            currentTime++;
            continue;
        }

        // Process the selected process
        p[shortest].finishTime = currentTime + p[shortest].burstTime;
        p[shortest].turnaroundTime = p[shortest].finishTime - p[shortest].arrivalTime;
        p[shortest].waitingTime = p[shortest].turnaroundTime - p[shortest].burstTime;
        
        // Mark as completed and update currentTime
        p[shortest].completed = 1;
        completedProcesses++;
        currentTime = p[shortest].finishTime;
    }
}

void displayProcessInfo(struct Process p[], int n) {
    printf("ID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t\t%d\n", 
               p[i].id, p[i].arrivalTime, p[i].burstTime, 
               p[i].finishTime, p[i].turnaroundTime, p[i].waitingTime);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter arrival time and burst time for process %d: ", p[i].id);
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
        p[i].completed = 0;
    }

    // Calculate times using Non-Preemptive SJF scheduling
    calculateTimes(p, n);

    // Display process information with calculated times
    printf("\nProcess information:\n");
    displayProcessInfo(p, n);

    return 0;
}

11)  priority scheduling(premtive and non-premtive)

#include <stdio.h>
#include <limits.h>

#define MAX_PROCESSES 100

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
    int finish_time;
    int turnaround_time;
    int waiting_time;
} Process;



void preemptive_priority_scheduling(Process processes[], int n) {

    int completed = 0, currentTime = 0, min_priority_index;
    int is_completed[MAX_PROCESSES] = {0};

    while (completed != n) {
        min_priority_index = -1;
        int min_priority = INT_MAX;

        // Select the process with the highest priority that has arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && !is_completed[i] && processes[i].priority < min_priority) {
                
                min_priority = processes[i].priority;
                min_priority_index = i;
            }
        }

        if (min_priority_index == -1) {
            currentTime++;
            continue;
        }

        // Process selected for execution
        processes[min_priority_index].remaining_time--;
        currentTime++;

        // Check if process is complete
        if (processes[min_priority_index].remaining_time == 0) {
            processes[min_priority_index].finish_time = currentTime;
            processes[min_priority_index].turnaround_time = currentTime - processes[min_priority_index].arrival_time;
            processes[min_priority_index].waiting_time = processes[min_priority_index].turnaround_time - processes[min_priority_index].burst_time;

            is_completed[min_priority_index] = 1;
            completed++;
        }
    }
}



void non_preemptive_priority_scheduling(Process processes[], int n) {

    int completed = 0, currentTime = 0, min_priority_index;
    int is_completed[MAX_PROCESSES] = {0};

    while (completed != n) {
        min_priority_index = -1;
        int min_priority = INT_MAX;

        // Select the process with the highest priority that has arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && !is_completed[i] && processes[i].priority < min_priority) {
                
                min_priority = processes[i].priority;
                min_priority_index = i;
            }
        }

        if (min_priority_index == -1) {
            currentTime++;
            continue;
        }

        // Process the selected task to completion
        currentTime += processes[min_priority_index].burst_time;
        processes[min_priority_index].finish_time = currentTime;
        processes[min_priority_index].turnaround_time = currentTime - processes[min_priority_index].arrival_time;
        processes[min_priority_index].waiting_time = processes[min_priority_index].turnaround_time - processes[min_priority_index].burst_time;

        is_completed[min_priority_index] = 1;
        completed++;
    }
}



void print_results(Process processes[], int n) {

    printf("\nPID\tArrival\tBurst\tPriority\tFinish\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\t\t%d\n", 
               processes[i].pid, 
               processes[i].arrival_time, 
               processes[i].burst_time, 
               processes[i].priority, 
               processes[i].finish_time, 
               processes[i].turnaround_time, 
               processes[i].waiting_time);
    }
}





int main() {
    int n, mode;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time, burst time, and priority for process %d: ", processes[i].pid);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time; // Initialize remaining time
    }

    printf("Select Mode: 1 for Preemptive, 2 for Non-Preemptive: ");
    scanf("%d", &mode);

    if (mode == 1) {
        preemptive_priority_scheduling(processes, n);
        printf("\nPreemptive Priority Scheduling Results:\n");
    } else {
        non_preemptive_priority_scheduling(processes, n);
        printf("\nNon-Preemptive Priority Scheduling Results:\n");
    }

    print_results(processes, n);

    return 0;
}

12)  	Write a program to compute the finish time, turnaround time and waiting time for the
 Round robin 

#include <stdio.h>
#include <stdlib.h>

typedef struct {
int pid; // Process ID
int bt; // Burst Time
int at; // Arrival Time
int ct; // Completion Time
int wt; // Waiting Time
int tat; // Turnaround Time
int rem_bt; // Remaining Burst Time (for Round Robin)
} Process;

void round_robin(Process p[], int n, int quantum) {
int time = 0;
int remaining = n;
int i = 0;

// Round Robin Scheduling
while (remaining > 0) {
if (p[i].rem_bt > 0) {
if (p[i].rem_bt <= quantum) {
time += p[i].rem_bt;
p[i].rem_bt = 0;
p[i].ct = time;
p[i].tat = p[i].ct - p[i].at;
p[i].wt = p[i].tat - p[i].bt;
remaining--;
} else {
p[i].rem_bt -= quantum;
time += quantum;
}
}
i = (i + 1) % n; // Circular queue
}

// Print results
printf("\nPID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
for (int i = 0; i < n; i++) {
printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
}
}

int main() {
int n, quantum;

// Input number of processes and quantum
printf("Enter the number of processes: ");
scanf("%d", &n);

Process p[n];

// Input process details (Arrival Time and Burst Time)
for (int i = 0; i < n; i++) {
p[i].pid = i + 1;
printf("\nEnter details for process %d:\n", i + 1);
printf("Arrival Time: ");
scanf("%d", &p[i].at);
printf("Burst Time: ");
scanf("%d", &p[i].bt);
p[i].rem_bt = p[i].bt; // Initialize remaining burst time
}

// Input the time quantum
printf("Enter the time quantum: ");
scanf("%d", &quantum);

// Perform Round Robin scheduling
round_robin(p, n, quantum);

return 0;
}


13)   Bankers algorithm
#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int n, m; 

void calculate_need(int need[MAX_PROCESSES][MAX_RESOURCES], int max[MAX_PROCESSES][MAX_RESOURCES], int allocation[MAX_PROCESSES][MAX_RESOURCES]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            need[i][j] = max[i][j] - allocation[i][j];
}

bool is_safe(int processes[], int available[], int max[][MAX_RESOURCES], int allocation[][MAX_RESOURCES]) {
    int need[MAX_PROCESSES][MAX_RESOURCES];
    calculate_need(need, max, allocation);

    bool finish[MAX_PROCESSES] = {0}; // Track if each process can finish
    int safe_sequence[MAX_PROCESSES]; // Store the safe sequence
    int work[MAX_RESOURCES];

    // Initialize work with available resources
    for (int i = 0; i < m; i++)
        work[i] = available[i];

    int count = 0; // Number of processes that can complete

    while (count < n) {
        bool found = false;

        for (int p = 0; p < n; p++) {
            if (!finish[p]) { // Check if this process is not yet finished
                int j;
                for (j = 0; j < m; j++)
                    if (need[p][j] > work[j])
                        break;

                // If all resources for process p can be allocated
                if (j == m) {
                    for (int k = 0; k < m; k++)
                        work[k] += allocation[p][k];

                    safe_sequence[count++] = p;
                    finish[p] = true;
                    found = true;
                }
            }
        }

        // If no process can be completed, return unsafe state
        if (!found) {
            printf("System is not in a safe state.\n");
            return false;
        }
    }

    // If all processes can complete, return safe state
    printf("System is in a safe state.\nSafe sequence: ");
    for (int i = 0; i < n; i++)
        printf("P%d ", safe_sequence[i]);
    printf("\n");

    return true;
}

int main() {
    int processes[MAX_PROCESSES], available[MAX_RESOURCES];
    int max[MAX_PROCESSES][MAX_RESOURCES], allocation[MAX_PROCESSES][MAX_RESOURCES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    for (int i = 0; i < n; i++)
        processes[i] = i;

    printf("Enter the available resources for each type: ");
    for (int i = 0; i < m; i++)
        scanf("%d", &available[i]);

    printf("Enter the maximum demand of each process:\n");
    for (int i = 0; i < n; i++) {
        printf("For process P%d: ", i);
        for (int j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
    }

    printf("Enter the allocated resources for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("For process P%d: ", i);
        for (int j = 0; j < m; j++)
            scanf("%d", &allocation[i][j]);
    }

    is_safe(processes, available, max, allocation);

    return 0;
}

18)  fcfs disk scheduling
#include <stdio.h>
#include <stdlib.h>

void print_table(int requests[], int n, int head, int seek_time) {
printf("\nDisk Scheduling - FCFS\n");
printf("------------------------------------------------\n");
printf("| Request Order | Position | Seek Time (Head -> Request) |\n");
printf("------------------------------------------------\n");

int current_position = head;
for (int i = 0; i < n; i++) {
int seek_distance = abs(requests[i] - current_position);
printf("| %2d | %3d | %3d ms |\n", i+1, requests[i], seek_distance);
current_position = requests[i];
}
printf("------------------------------------------------\n");
printf("| Total Seek Time: %d ms |\n", seek_time);
printf("------------------------------------------------\n");
}

int fcfs_disk_scheduling(int requests[], int n, int head) {
int total_seek_time = 0;
int current_position = head;

for (int i = 0; i < n; i++) {
total_seek_time += abs(requests[i] - current_position);
current_position = requests[i];
}

return total_seek_time;
}

int main() {
int n, head;

// Input: Number of disk requests
printf("Enter the number of disk requests: ");
scanf("%d", &n);

int requests[n];

// Input: Disk request sequence
printf("Enter the disk requests (in sequence): ");
for (int i = 0; i < n; i++) {
scanf("%d", &requests[i]);
}

// Input: Initial head position
printf("Enter the initial head position: ");
scanf("%d", &head);

// Calculate total seek time using FCFS
int seek_time = fcfs_disk_scheduling(requests, n, head);

// Display the input and output in a tabular format
print_table(requests, n, head, seek_time);

return 0;
}
7
82 170 43 140 24 16 190
50

Ans 642

19)  sstf disk algorithm


#include <stdio.h>
#include <stdlib.h>
#include <limits.h> // Include limits.h for INT_MAX

void print_table(int requests[], int n, int head, int total_seek_time, int seek_sequence[]) {
printf("\nDisk Scheduling - SSTF\n");
printf("------------------------------------------------\n");
printf("| Request Order | Position | Seek Time (Head -> Request) |\n");
printf("------------------------------------------------\n");

int current_position = head;
for (int i = 0; i < n; i++) {
int seek_distance = abs(seek_sequence[i] - current_position);
printf("| %2d | %3d | %3d ms |\n", i + 1, seek_sequence[i], seek_distance);
current_position = seek_sequence[i];
}
printf("------------------------------------------------\n");
printf("| Total Seek Time: %d ms |\n", total_seek_time);
printf("------------------------------------------------\n");
}

int find_closest_request(int requests[], int n, int head, int processed[]) {
int min_distance = INT_MAX; // Use INT_MAX instead of _INT_MAX_
int closest_index = -1;

for (int i = 0; i < n; i++) {
if (!processed[i]) { // If request has not been processed
int distance = abs(requests[i] - head);
if (distance < min_distance) {
min_distance = distance;
closest_index = i;
}
}
}
return closest_index;
}

int sstf_disk_scheduling(int requests[], int n, int head, int seek_sequence[]) {
int total_seek_time = 0;
int processed[n];
for (int i = 0; i < n; i++) {
processed[i] = 0; // Initialize all requests as unprocessed
}

for (int i = 0; i < n; i++) {
int closest_index = find_closest_request(requests, n, head, processed);
if (closest_index == -1) break;

processed[closest_index] = 1;
seek_sequence[i] = requests[closest_index];
total_seek_time += abs(head - requests[closest_index]);
head = requests[closest_index];
}

return total_seek_time;
}

int main() {
int n, head;

// Input: Number of disk requests
printf("Enter the number of disk requests: ");
scanf("%d", &n);

int requests[n];
int seek_sequence[n];

// Input: Disk request sequence
printf("Enter the disk requests (in sequence): ");
for (int i = 0; i < n; i++) {
scanf("%d", &requests[i]);
}

// Input: Initial head position
printf("Enter the initial head position: ");
scanf("%d", &head);

// Calculate total seek time using SSTF
int total_seek_time = sstf_disk_scheduling(requests, n, head, seek_sequence);

// Display the input and output in a tabular format
print_table(requests, n, head, total_seek_time, seek_sequence);

return 0;
}






Experiment Number:3

Problem Statement: Shell scripting programs.
NAME: Manoj Dhanraj Mule   		                 ROLLNO:  71
CLASS:  IT-B							     BATCH:  B3
DATE OF PERFORMANCE: 25-07-2024
___________________________________________________________________________
PROGARM:


Print Sum of Digits of a given number using command line argument

Program 1:

code:

#!/bin/bash

if [ $# -ne 1 ]; then
    echo "Usage: $0 <number>"
    exit 1
fi

number=$1
sum=0

while [ $number -gt 0 ]; do
    digit=$(( $number % 10 ))
    sum=$(( $sum + $digit ))
    number=$(( $number / 10 ))
done

echo "Sum of digits of $1 is: $sum"


output:

manoj@manoj-VirtualBox:~/shellscriptprogram$ ./sum.sh 123
Sum of digits of 123 is: 6


2)Write a shell script using function for following:
	1)average of given numbers 
	2) Max  digit from given number and
	3) min digit  from given number

program 2:

code:

#!/bin/bash

# Function to calculate the average of numbers
average() {
    local total=0
    local count=0
    for num in "$@"; do
        total=$((total + num))
        count=$((count + 1))
    done
    if [ $count -gt 0 ]; then
        echo "Average: $((total / count))"
    else
        echo "No numbers provided."
    fi
}

# Function to find the maximum digit
max_digit() {
    local number=$1
    local max=0
    while [ $number -gt 0 ]; do
        digit=$((number % 10))
        if [ $digit -gt $max ]; then
            max=$digit
        fi
        number=$((number / 10))
    done
    echo "Max digit: $max"
}

# Function to find the minimum digit
min_digit() {
    local number=$1
    local min=9
    while [ $number -gt 0 ]; do
        digit=$((number % 10))
        if [ $digit -lt $min ]; then
            min=$digit
        fi
        number=$((number / 10))
    done
    echo "Min digit: $min"
}

# Main script

# Read input from the user
echo "Enter numbers separated by spaces:"
read -r -a numbers

if [ ${#numbers[@]} -eq 0 ]; then
    echo "No numbers provided. Exiting."
    exit 1
fi

# Call functions with the user input
average "${numbers[@]}"
max_digit "${numbers[0]}"
min_digit "${numbers[0]}"

output:

manoj@manoj-VirtualBox:~/shellscriptprogram$ ./function.sh
Enter numbers separated by spaces:
123 456 789
Average: 456
Max digit: 3
Min digit: 1



3) Perform sorting on given array elements


program 3:


#!/bin/bash

# Prompt user to enter numbers
echo "Enter numbers separated by spaces:"
read -r -a array

# Sort array in ascending order
sorted=($(printf '%s\n' "${array[@]}" | sort -n))

# Print sorted array
echo "Sorted array:"
echo "${sorted[@]}"


output:

manoj@manoj-VirtualBox:~/shellscriptprogram$ ./sort.sh
Enter numbers separated by spaces:
6 5 4 3 2
Sorted array:
2 3 4 5 6



4) Program to find factorial of a given number with and without recursion

program 4:

#!/bin/bash

# Factorial with recursion
factorial_recursive() {
    if [ $1 -eq 0 ]; then
        echo 1
    else
        local prev=$(factorial_recursive $(( $1 - 1 )))
        echo $(( $1 * $prev ))
    fi
}

# Factorial without recursion
factorial_non_recursive() {
    local number=$1
    local result=1
    while [ $number -gt 0 ]; do
        result=$(( result * number ))
        number=$(( number - 1 ))
    done
    echo $result
}

# Main script
echo "Enter a number:"
read -r num

if ! [[ $num =~ ^[0-9]+$ ]]; then
    echo "Please enter a valid positive integer."
    exit 1
fi

echo "Factorial of $num (recursive): $(factorial_recursive $num)"
echo "Factorial of $num (non-recursive): $(factorial_non_recursive $num)"

output:

manoj@manoj-VirtualBox:~/shellscriptprogram$ ./factorial.sh
Enter a number:
5
Factorial of 5 (recursive): 120
Factorial of 5 (non-recursive): 120





5) Program to check file type and permission for a given file

Program


program 5:

#!/bin/bash

# Function to check file type and permissions
check_file() {
    local file="$1"
    
    if [ ! -e "$file" ]; then
        echo "File $file does not exist."
    else
        echo "File type of $file:"
        file "$file"
        echo "Permissions of $file:"
        ls -l "$file"
    fi
}

# Main script
echo "Enter the file path:"
read -r file_path

check_file "$file_path"


output:


manoj@manoj-VirtualBox:~/shellscriptprogram$ ./filetype.sh
Enter the file path:
/home/manoj/shellscriptprogram/sum.sh
File type of /home/manoj/shellscriptprogram/sum.sh:
/home/manoj/shellscriptprogram/sum.sh: Bourne-Again shell script, ASCII text executable
Permissions of /home/manoj/shellscriptprogram/sum.sh:
-rwxrwxr-x 1 manoj manoj 257 Aug 10 15:01 /home/manoj/shellscriptprogram/sum.sh



6)Check entered string is palindrome or not?

program 6:

#!/bin/bash

# Function to check if string is palindrome
is_palindrome() {
    local string="$1"
    local reversed=$(echo "$string" | rev)
    
    if [ "$string" = "$reversed" ]; then
        echo "Entered string is a palindrome."
    else
        echo "Entered string is not a palindrome."
    fi
}

# Main script
read -p "Enter a string: " input_string
is_palindrome "$input_string"

output:

manoj@manoj-VirtualBox:~/shellscriptprogram$ ./palindrome.sh
Enter a string: aba
Entered string is a palindrome.
manoj@manoj-VirtualBox:~/shellscriptprogram$ ./palindrome.sh
Enter a string: abc
Entered string is not a palindrome.
manoj@manoj-VirtualBox:~/shellscriptprogram$


7) File Handling Program 

program 7:

#!/bin/bash

# Function to perform read operation
perform_read_operation() {
    echo "Contents of '$file_path':"
    cat "$file_path"
}

# Function to perform write operation (overwrite)
perform_write_operation() {
    echo "Enter content to write:"
    read new_content
    echo "$new_content" > "$file_path"
    echo "Write operation complete."
}

# Function to perform append operation
perform_append_operation() {
    echo "Enter content to append:"
    read appended_content
    echo "$appended_content" >> "$file_path"
    echo "Append operation complete."
}

# Function to check and display file type
check_file_type() {
    if [ -f "$file_path" ]; then
        echo "'$file_path' is a regular file."
    elif [ -d "$file_path" ]; then
        echo "'$file_path' is a directory."
    else
        echo "'$file_path' is neither a regular file nor a directory."
    fi
}

# Main script starts here
echo "Enter the file name:"
read file_path

# Check if file exists
if [ -e "$file_path" ]; then
    echo "File '$file_path' exists."
    
    # Display file type
    check_file_type
    
    # Menu for operations
    echo "Select an operation:"
    echo "1. Read from file"
    echo "2. Write to file (overwrite)"
    echo "3. Append to file"
    read choice
    
    case $choice in
        1)
            # Perform read operation
            if [ -r "$file_path" ]; then
                perform_read_operation
            else
                echo "Read permission denied."
            fi
            ;;
        2)
            # Perform write operation
            if [ -w "$file_path" ]; then
                perform_write_operation
            else
                echo "Write permission denied."
            fi
            ;;
        3)
            # Perform append operation
            if [ -a "$file_path" ]; then
                perform_append_operation
            else
                echo "Append permission denied."
            fi
            ;;
        *)
            echo "Invalid choice. Exiting."
            ;;
    esac

else
    echo "File '$file_path' does not exist."
fi


output:

manoj@manoj-VirtualBox:~/shellscriptprogram$ ./filehandle.sh
Enter the file name:
demo
File 'demo' exists.
'demo' is a regular file.
Select an operation:
1. Read from file
2. Write to file (overwrite)
3. Append to file
1
Contents of 'demo':
i am a third year student
manoj@manoj-VirtualBox:~/shellscriptprogram$ ./filehandle.sh
Enter the file name:
demo
File 'demo' exists.
'demo' is a regular file.
Select an operation:
1. Read from file
2. Write to file (overwrite)
3. Append to file
2
Enter content to write:
i am it student
Write operation complete.
manoj@manoj-VirtualBox:~/shellscriptprogram$ ./filehandle.sh
Enter the file name:
demo
File 'demo' exists.
'demo' is a regular file.
Select an operation:
1. Read from file
2. Write to file (overwrite)
3. Append to file
1
Contents of 'demo':
i am it student
manoj@manoj-VirtualBox:~/shellscriptprogram$

All output :


 


 




